---
- name: Detect which master owns the VIP
  hosts: masters
  gather_facts: false
  become: true
  tasks:
    - name: Check if VIP is present on this node (non-fatal)
      ansible.builtin.shell: "ip addr show | grep -w {{ vip_ip }}"
      register: vip_check
      ignore_errors: true
      changed_when: false

    - name: Mark this host as VIP owner if found
      ansible.builtin.set_fact:
        is_vip_master: true
      when: vip_check.rc == 0

- name: Determine VIP master on controller and create vip_master group
  hosts: localhost
  gather_facts: false
  tasks:
    - name: Find the host that reported is_vip_master (run once)
      set_fact:
        found_vip_host: "{{ item }}"
      loop: "{{ groups['masters'] }}"
      when: hostvars[item].is_vip_master is defined and hostvars[item].is_vip_master
      run_once: true

    - name: Fail if we could not determine vip_master
      ansible.builtin.fail:
        msg: >-
          Could not find any master with the VIP {{ vip_ip }}.
          Make sure keepalived (or equivalent) is running and VIP is configured.
      when: found_vip_host is not defined or found_vip_host == ""

    - name: Create dynamic group 'vip_master' with the detected host (run_once)
      add_host:
        name: "{{ found_vip_host }}"
        groups: vip_master
        ansible_host: "{{ hostvars[found_vip_host].ansible_host | default(found_vip_host) }}"
      run_once: true

    - name: Show selected vip_master
      ansible.builtin.debug:
        msg: "Detected VIP owner: {{ found_vip_host }}"

- name: Copy admin.conf from VIP master to new master
  hosts: join[0]
  become: true
  tasks:
    - name: Slurp /etc/kubernetes/admin.conf from VIP master
      ansible.builtin.slurp:
        src: /etc/kubernetes/admin.conf
      register: admin_conf_content
      delegate_to: "{{ groups['vip_master'] | first }}"

    - name: Ensure .kube directory exists
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/.kube"
        state: directory
        mode: '0755'

    - name: Copy admin.conf to new master's kube config
      ansible.builtin.copy:
        dest: "{{ ansible_env.HOME }}/.kube/config"
        content: "{{ admin_conf_content.content | b64decode }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0644'

    - name: Also copy admin.conf to system location
      ansible.builtin.copy:
        dest: /etc/kubernetes/admin.conf
        content: "{{ admin_conf_content.content | b64decode }}"
        owner: root
        group: root
        mode: '0644'

